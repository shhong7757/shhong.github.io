{"version":3,"sources":["webpack:///./src/components/PostTitle/index.ts","webpack:///./src/components/PostTitle/PostTitle.tsx","webpack:///./src/components/PostTitleList/PostTitleList.tsx","webpack:///./src/components/PostTitleList/index.ts","webpack:///./src/components/Header/index.ts","webpack:///./src/components/Header/Header.tsx","webpack:///./src/components/Layout/Layout.tsx","webpack:///./src/components/Layout/index.ts","webpack:///./src/components/Tag/index.ts","webpack:///./src/components/Tag/Tag.tsx","webpack:///./src/components/TagList/TagList.tsx","webpack:///./src/components/TagList/index.ts","webpack:///./src/components/Category/index.ts","webpack:///./src/components/Category/Category.tsx","webpack:///./src/components/CategoryList/CategoryList.tsx","webpack:///./src/components/CategoryList/index.ts","webpack:///./src/pages/tags.tsx","webpack:///./src/components/CategoryGroup/index.ts","webpack:///./src/components/CategoryGroup/CategoryGroup.tsx","webpack:///./src/components/CategoryGorupList/CategoryGroupList.tsx","webpack:///./src/components/CategoryGorupList/index.ts"],"names":["PostTitle","postTitle","title","date","path","tags","to","style","textDecoration","css","TagList","PostTitleList","postTitles","map","key","id","Header","siteTitle","marginBottom","margin","maxWidth","padding","color","activeStyle","fontSize","fontWeight","marginRight","Layout","children","data","site","siteMetadata","paddingTop","Tag","tag","vertical","index","toString","display","Category","value","totalCount","BlogCategoryList","categories","category","CartegoryList","TagsPage","location","group","allMarkdownRemark","hash","useState","groupRefs","setGroupRefs","categoryGroups","useMemo","g","edges","edge","node","frontmatter","useEffect","refs","length","i","push","createRef","ref","find","current","innerText","substring","scrollIntoView","behavior","block","query","CategoryGroupList","groupRef","BlogCategoryGroupList","categoryGroup"],"mappings":"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","file":"component---src-pages-tags-tsx-ebfe0f54211ef215de96.js","sourcesContent":["import PostTitle from './PostTitle';\n\nexport default PostTitle;\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { Link } from 'gatsby';\n\nimport TagList from '../TagList';\n\ninterface Props {\n  postTitle: PostTitle;\n}\n\nconst PostTitle = ({ postTitle: { title, date, path, tags } }: Props) => {\n  return (\n    <Link to={`${path}`} style={{ textDecoration: 'none' }}>\n      <span css={{ fontSize: 24 }}>{title}</span>\n      <span css={{ marginLeft: 10 }}>{date}</span>\n      <TagList tags={tags} />\n    </Link>\n  );\n};\n\nexport default PostTitle;\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\n\nimport PostTitle from '../PostTitle';\n\ninterface Props {\n  postTitles: PostTitle[];\n}\n\nconst PostTitleList = ({ postTitles }: Props) => {\n  return (\n    <ul css={{ margin: 0, padding: 0 }}>\n      {postTitles.map(postTitle => {\n        return (\n          <li\n            key={postTitle.id}\n            css={{\n              listStyleType: 'none',\n            }}\n          >\n            <PostTitle postTitle={postTitle} />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default PostTitleList;\n","import PostTitleList from './PostTitleList';\n\nexport default PostTitleList;\n","import Header from \"./Header\"\n\nexport default Header\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { Link } from 'gatsby';\n\ninterface Props {\n  siteTitle: string;\n}\n\nconst Header = ({ siteTitle }: Props) => (\n  <header\n    style={{\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 1250,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <div css={{ display: 'grid', gridTemplateColumns: '1fr auto' }}>\n        <h1 style={{ margin: 0 }}>\n          <Link\n            to=\"/\"\n            style={{\n              color: `black`,\n              textDecoration: `none`,\n            }}\n          >\n            {siteTitle}\n          </Link>\n        </h1>\n      </div>\n      <nav>\n        <Link\n          to=\"/about\"\n          activeStyle={{ color: 'hotpink' }}\n          style={{\n            color: `black`,\n            textDecoration: `none`,\n            fontSize: 20,\n            fontWeight: 'bold',\n            marginRight: 10,\n          }}\n        >\n          /About\n        </Link>\n        <Link\n          to=\"/blog\"\n          activeStyle={{ color: 'hotpink' }}\n          style={{\n            color: `black`,\n            fontSize: 20,\n            fontWeight: 'bold',\n            textDecoration: `none`,\n            marginRight: 10,\n          }}\n        >\n          /Blog\n        </Link>\n        <Link\n          to=\"/tags\"\n          activeStyle={{ color: 'hotpink' }}\n          style={{\n            color: `black`,\n            fontSize: 20,\n            fontWeight: 'bold',\n            textDecoration: `none`,\n          }}\n        >\n          /Tags\n        </Link>\n      </nav>\n    </div>\n  </header>\n);\n\nexport default Header;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Header from '../Header';\n\nconst Layout: React.FC = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 1250,\n          padding: `0px 1.0875rem 1.45rem`,\n          paddingTop: 0,\n        }}\n      >\n        <main>{children}</main>\n        <footer></footer>\n      </div>\n    </>\n  );\n};\n\nexport default Layout;\n","import Layout from './Layout';\n\nexport default Layout;\n","import Tag from './Tag'\n\nexport default Tag\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\n\ninterface Props {\n  tag: string;\n}\n\nconst Tag = ({ tag }: Props) => {\n  return <span>ğŸ”– {tag}</span>;\n};\n\nexport default Tag;\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\n\nimport Tag from '../Tag';\n\ninterface Props {\n  tags: string[];\n  vertical?: boolean;\n}\n\nconst TagList = ({ tags, vertical = false }: Props) => {\n  return (\n    <div>\n      {tags.map((tag, index) => (\n        <span\n          key={index.toString()}\n          css={{\n            marginRight: 10,\n            display: vertical ? 'block' : 'inline-bl',\n          }}\n        >\n          <Tag tag={tag} />\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default TagList;\n","import TagList from './TagList'\n\nexport default TagList\n","import Category from './Category'\n\nexport default Category\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { Link } from 'gatsby';\n\ninterface Props {\n  value: string | null;\n  totalCount: number;\n}\n\nconst BlogCategory = ({ value, totalCount }: Props) => {\n  return (\n    <Link to={`/blog/#${value}`}>\n      <span css={{ padding: 8 }}>\n        <span>{value ? value : 'ë¯¸ë¶„ë¥˜'}</span>\n      </span>\n    </Link>\n  );\n};\n\nexport default BlogCategory;\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\n\nimport Category from '../Category';\n\ninterface Props {\n  categories: Category[];\n}\n\nconst BlogCategoryList = ({ categories }: Props) => {\n  return (\n    <div>\n      <span css={{}}>Category</span>\n      <div css={{}}>\n        {categories.map((category, index) => {\n          const { value, totalCount } = category;\n          return (\n            <Category\n              key={index.toString()}\n              value={value}\n              totalCount={totalCount}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default BlogCategoryList;\n","import CartegoryList from './CategoryList'\n\nexport default CartegoryList\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { createRef, RefObject, useEffect, useMemo, useState } from 'react';\n\nimport { graphql } from 'gatsby';\n\nimport CategoryGroupList from '../components/CategoryGorupList';\nimport CategoryList from '../components/CategoryList';\nimport Layout from '../components/Layout';\n\nimport 'prismjs/themes/prism-okaidia.css';\n\ninterface Props {\n  data: BlogData;\n  location: Location;\n}\n\nconst TagsPage = ({ data, location }: Props) => {\n  const {\n    allMarkdownRemark: { group },\n  } = data;\n  const { hash } = location;\n\n  const [groupRefs, setGroupRefs] = useState<RefObject<HTMLHeadingElement>[]>(\n    []\n  );\n\n  const categoryGroups: CategoryGroup[] = useMemo(() => {\n    return group.map(g => {\n      const { category, edges } = g;\n      const postTitles = edges.map(edge => {\n        const {\n          node: {\n            id,\n            frontmatter: { title, date, path, tags },\n          },\n        } = edge;\n        return { id, title, date, path, tags };\n      });\n      return {\n        category,\n        postTitles,\n      };\n    });\n  }, [group]);\n  const categories: Category[] = useMemo(\n    () =>\n      group.map(g => {\n        const { category, totalCount } = g;\n        return { value: category, totalCount };\n      }),\n    [group]\n  );\n\n  useEffect(() => {\n    let refs: RefObject<HTMLHeadingElement>[] = [];\n    let length = categories.length;\n    for (let i = 0; i < length; i++) {\n      refs.push(createRef<HTMLHeadingElement>());\n    }\n    setGroupRefs(refs);\n  }, [categories]);\n\n  useEffect(() => {\n    if (hash !== '' && groupRefs.length > 0) {\n      const ref = groupRefs.find(\n        ref => ref.current && ref.current.innerText === hash.substring(1)\n      );\n      ref?.current?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n    }\n  }, [groupRefs, hash]);\n\n  return (\n    <Layout>\n      <div\n        css={{\n          margin: 'auto',\n          maxWidth: 1250,\n        }}\n      >\n        <CategoryList categories={categories} />\n        <CategoryGroupList\n          groupRefs={groupRefs}\n          categoryGroups={categoryGroups}\n        />\n      </div>\n    </Layout>\n  );\n};\n\nexport default TagsPage;\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark {\n      group(field: frontmatter___category) {\n        category: fieldValue\n        totalCount\n        edges {\n          node {\n            id\n            frontmatter {\n              date(formatString: \"YYYY.MM.DD\")\n              path\n              tags\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import CategoryGroupList from './CategoryGroup'\n\nexport default CategoryGroupList\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { Fragment, RefObject } from 'react';\n\nimport PostTitleList from '../PostTitleList';\n\ninterface Props extends CategoryGroup {\n  groupRef: RefObject<HTMLHeadingElement>;\n}\n\nconst BlogCategoryGroup = ({ category, postTitles, groupRef }: Props) => {\n  return (\n    <Fragment>\n      <h2 ref={groupRef} css={{ color: 'hotpink' }}>\n        {category}\n      </h2>\n      <PostTitleList postTitles={postTitles} />\n    </Fragment>\n  );\n};\n\nexport default BlogCategoryGroup;\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { Fragment, RefObject } from 'react';\n\nimport CategoryGroup from '../CategoryGroup';\n\ninterface Props {\n  categoryGroups: CategoryGroup[];\n  groupRefs: RefObject<HTMLHeadingElement>[];\n}\n\nconst BlogCategoryGroupList = ({ categoryGroups, groupRefs }: Props) => {\n  return (\n    <Fragment>\n      {categoryGroups.map((categoryGroup, index) => (\n        <CategoryGroup\n          key={index.toString()}\n          groupRef={groupRefs[index]}\n          {...categoryGroup}\n        />\n      ))}\n    </Fragment>\n  );\n};\n\nexport default BlogCategoryGroupList;\n","import CategoryGroupList from './CategoryGroupList'\n\nexport default CategoryGroupList\n"],"sourceRoot":""}